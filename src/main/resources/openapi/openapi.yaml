openapi: 3.0.3
info:
  title: AI Job Matching API
  description: REST API for managing candidates, job postings, and AI-powered matching.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: Candidates
    description: Operations related to candidate management
  - name: Jobs
    description: Operations related to job postings
  - name: Matching
    description: Operations for matching candidates to jobs

paths:
  /candidates:
    get:
      tags:
        - Candidates
      summary: List all candidates with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Page number (starts at 0)
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of candidates per page
      responses:
        '200':
          description: A paginated list of candidates
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
    post:
      tags:
        - Candidates
      summary: Register a new candidate
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                  format: email
                skills:
                  type: array
                  items:
                    type: string
                experienceYears:
                  type: integer
                resume:
                  type: string
                  format: binary
      responses:
        '201':
          description: Candidate created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
  /candidates/{id}:
    get:
      tags:
        - Candidates
      summary: Get candidate by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Candidate data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
    delete:
      tags:
        - Candidates
      summary: Delete candidate by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Candidate deleted
        '404':
          description: Candidate not found
    put:
      tags:
        - Candidates
      summary: Update an existing candidate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                  format: email
                skills:
                  type: array
                  items:
                    type: string
                experienceYears:
                  type: integer
                resume:
                  type: string
                  format: binary
      responses:
        '200':
          description: Candidate updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'

  /jobs:
    post:
      tags:
        - Jobs
      summary: Post a new job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
    get:
      tags:
        - Jobs
      summary: Get all jobs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Page number (starts at 0)
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of candidates per page
      responses:
        '200':
          description: A paginated list of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobResponse'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get job by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '404':
          description: Job not found
    put:
      tags:
        - Jobs
      summary: Update job by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        '200':
          description: Job updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '404':
          description: Job not found
    delete:
      tags:
        - Jobs
      summary: Delete job by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Job deleted
        '404':
          description: Job not found

  /match/{candidateId}:
    post:
      tags:
        - Matching
      summary: Match candidate to jobs
      parameters:
        - name: candidateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Match result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResult'

components:
  schemas:
    CandidateResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        skills:
          type: array
          items:
            type: string
        experienceYears:
          type: integer
        resumeText:
          type: string

    JobRequest:
      type: object
      required:
        - title
        - description
        - requiredSkills
      properties:
        title:
          type: string
        description:
          type: string
        requiredSkills:
          type: array
          items:
            type: string
        minExperience:
          type: integer

    JobResponse:
      allOf:
        - $ref: '#/components/schemas/JobRequest'
        - type: object
          properties:
            id:
              type: string

    MatchResult:
      type: object
      properties:
        jobId:
          type: string
        jobTitle:
          type: string
        matchScore:
          type: number
          format: float
